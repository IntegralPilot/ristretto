name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  checks:
    name: Checks
    uses: ./.github/workflows/checks.yml

  build:
    name: ${{ matrix.platform }}
    needs: [ checks ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux-x64
          - macos-arm64
          - macos-x64
          - windows-x64
          - wasm32-unknown
          - wasm32-wasi

        include:
          - platform: linux-x64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: macos-arm64
            os: macos-14
            target: aarch64-apple-darwin
          - platform: macos-x64
            os: macos-13
            target: x86_64-apple-darwin
          - platform: windows-x64
            os: windows-2022
            target: x86_64-pc-windows-msvc
          - platform: wasm32-unknown
            os: ubuntu-22.04
            target: wasm32-unknown-unknown
          - platform: wasm32-wasi
            os: ubuntu-22.04
            target: wasm32-wasip1-threads

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          components: 'llvm-tools-preview'
          targets: ${{ matrix.target }}
          toolchain: stable

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Build
        if: ${{ startsWith(matrix.platform, 'wasm32-') }}
        env:
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RUST_LOG: "info"
          RUST_LOG_SPAN_EVENTS: full
        run: |
          cargo build --target ${{ matrix.target }}

      - name: Tests
        if: ${{ !startsWith(matrix.platform, 'wasm32-') }}
        env:
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RUST_LOG: "info"
          RUST_LOG_SPAN_EVENTS: full
        run: |
          cargo test --target ${{ matrix.target }}

      - name: Tests
        if: ${{ startsWith(matrix.platform, 'linux-') }}
        env:
          CARGO_TERM_COLOR: always
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          LLVM_PROFILE_FILE: ristretto-%p-%m.profraw
          RUST_LOG: "info"
          RUST_LOG_SPAN_EVENTS: full
          RUSTFLAGS: -Cinstrument-coverage
          RUSTDOCFLAGS: -Cinstrument-coverage
        run: |
          cargo test --target ${{ matrix.target }} --workspace --all-features

      - name: Produce coverage info
        if: ${{ startsWith(matrix.platform, 'linux-') }}
        run: |
          grcov $(find . -name "ristretto-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload to codecov.io
        if: ${{ startsWith(matrix.platform, 'linux-') }}
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Install benchmarking tools
        if: ${{ github.ref == 'refs/heads/main' && startsWith(matrix.platform, 'ubuntu-') }}
        uses: bencherdev/bencher@main

      - name: Run benchmarks
        if: ${{ github.ref == 'refs/heads/main' && startsWith(matrix.platform, 'ubuntu-') }}
        env:
          BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
          BENCHER_PROJECT: theseus-rs-ristretto
          BENCHER_ADAPTER: rust_criterion
        run: |
          bencher run "cargo bench"
