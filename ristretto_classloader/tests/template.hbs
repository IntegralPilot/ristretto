use crate::arguments::Arguments;
use crate::native_methods::registry::MethodRegistry;
use crate::thread::Thread;
use crate::Result;
use async_recursion::async_recursion;
use ristretto_classloader::Value;
use std::sync::Arc;

/// Register all native methods for `{{class_name}}`.
pub(crate) fn register(registry: &mut MethodRegistry) {
    let class_name = "{{raw_class_name}}";
{{#each methods as |method| }}
    registry.register(class_name, "{{method.name}}", "{{method.descriptor}}", {{method.function_name}});
{{/each}}
}
{{#each methods as |method| }}

#[expect(clippy::needless_pass_by_value)]
#[async_recursion(?Send)]
async fn {{method.function_name}}(_thread: Arc<Thread>, _arguments: Arguments) -> Result<Option<Value>> {
    {{method.body}}
}
{{/each}}
